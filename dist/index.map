{"version":3,"sources":["index.js"],"names":["settings","infinite","rewind","slidesToShow","ReactSimpleCarousel","Component","constructor","props","slideRefs","forceUpdate","e","preventDefault","incrementSlide","toSlide","onSlide","state","n","cb","numSlides","cutToSlideOnRest","slideDiff","setState","slideSizes","forEach","ref","push","calculateElementSizeFromRef","calculateSlideSizes","offset","buffer","centerMode","slidesToCalculate","slice","reduce","prev","curr","width","targetSlide","wrapAroundCount","window","sliderRef","current","paddingLeft","getComputedStyle","getPropertyValue","replace","parseInt","prevProps","down","delta","xDelta","yDelta","dragging","prevDown","Math","abs","increment","setTimeout","children","length","calculateSlides","cutToSlide","interaction","stopPropagation","slides","React","createRef","forceRepaint","childSlides","map","slide","i","el","clone","index","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","noAnimate","clientWidth","height","clientHeight","render","baseOffset","calculateOffset","sliderWidth","prevSlideNum","nextSlideNum","mass","tension","friction","clamp","x","onRest","transform","interpolate","handleClick","LeftArrow","next","RightArrow","Array","apply","additionalClasses","ReactSimpleCarouselSlide","forwardRef","slideIndex","isClone","relFromActive","inverseRelFromActive","isActive","isNext","isPrev","classNames","join"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["import React, { Component } from \"react\";\nimport { withGesture } from \"react-with-gesture\";\nimport { Spring, animated } from \"react-spring\";\nimport debounce from \"lodash/debounce\";\n\nimport LeftArrow from \"./assets/images/arrow-left.svg\";\nimport RightArrow from \"./assets/images/arrow-right.svg\";\nimport \"./assets/scss/carousel.scss\";\n\n//Demo content\nconst settings = {\n  infinite: true,\n  rewind: false,\n  slidesToShow: 5\n};\n\nclass ReactSimpleCarousel extends Component {\n  constructor(props) {\n    slideRefs = [];\n    super(props);\n    //TODO: use props to get settings\n    // const {settings} = this.props\n    // //create refs for slides\n    // // settings.slides.forEach((slide, i) => {\n    // //   this.slideRefs.push(React.createRef());\n    // // });\n\n    // const childSlides = this.props.children;\n    // const slides = [\n    //   ...childSlides.map((slide, i) => ({\n    //     el: { ...slide },\n    //     clone: true,\n    //     index: i\n    //   })),\n    //   ...childSlides.map((slide, i) => ({\n    //     el: { ...slide },\n    //     clone: false,\n    //     index: i\n    //   })),\n    //   ...childSlides.map((slide, i) => ({\n    //     el: { ...slide },\n    //     clone: true,\n    //     index: i\n    //   }))\n    // ];\n    // slides.forEach((slide, i) => {\n    //   this.slideRefs.push(React.createRef());\n    // });\n    // const numSlides = childSlides.length;\n    this.state = {\n      onSlide: 0,\n      slides: [],\n      numSlides: 0,\n      cutToSlideOnRest: false,\n      dragging: false,\n      centerMode: true\n    };\n    this.sliderRef = React.createRef();\n    this.forceRepaint = debounce(this.forceRepaint, 100);\n  }\n\n  calculateSlides() {\n    this.slideRefs = [];\n    const childSlides = this.props.children || [];\n    const slides = [\n      ...childSlides.map((slide, i) => ({\n        el: { ...slide },\n        clone: true,\n        index: i\n      })),\n      ...childSlides.map((slide, i) => ({\n        el: { ...slide },\n        clone: false,\n        index: i\n      })),\n      ...childSlides.map((slide, i) => ({\n        el: { ...slide },\n        clone: true,\n        index: i\n      }))\n    ];\n    slides.forEach((slide, i) => {\n      this.slideRefs.push(React.createRef());\n    });\n    const numSlides = childSlides.length;\n    this.setState({ ...this.state, slides, numSlides }, this.forceRepaint);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.forceRepaint);\n    this.calculateSlides();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.forceRepaint);\n  }\n\n  forceRepaint = () => {\n    this.forceUpdate();\n  };\n\n  prev = e => {\n    e.preventDefault();\n    this.incrementSlide(-1);\n  };\n\n  next = e => {\n    e.preventDefault();\n    this.incrementSlide(1);\n  };\n\n  toSlide = toSlide => {\n    const { onSlide } = this.state;\n    this.incrementSlide(toSlide - onSlide);\n  };\n\n  incrementSlide = (n, cb = () => {}) => {\n    const { onSlide, numSlides } = this.state;\n    let { cutToSlideOnRest } = this.state;\n    //TODO: use props to get settings\n    // const {settings} = this.props\n    let toSlide = onSlide + n;\n    //Why not just use 0?\n    const slideDiff = toSlide % (numSlides - 0);\n    if (toSlide >= numSlides) {\n      if (settings.infinite) {\n        cutToSlideOnRest = slideDiff;\n      } else if (settings.rewind) {\n        toSlide = 0;\n      } else {\n        toSlide = numSlides - 1;\n      }\n    } else if (toSlide < 0) {\n      if (settings.infinite) {\n        cutToSlideOnRest = numSlides + slideDiff;\n      } else if (settings.rewind) {\n        toSlide = numSlides - 1;\n      } else {\n        toSlide = 0;\n      }\n    }\n    this.setState(\n      {\n        ...this.state,\n        onSlide: toSlide,\n        cutToSlideOnRest\n      },\n      cb\n    );\n  };\n\n  cutToSlide(toSlide, cb = () => {}) {\n    this.setState(\n      {\n        ...this.state,\n        onSlide: toSlide,\n        noAnimate: true,\n        cutToSlideOnRest: false\n      },\n      () => {\n        this.setState(\n          {\n            ...this.state,\n            noAnimate: false\n          },\n          cb\n        );\n      }\n    );\n  }\n\n  calculateSlideSizes = () => {\n    let slideSizes = [];\n    this.slideRefs.forEach(ref => {\n      slideSizes.push(this.calculateElementSizeFromRef(ref));\n    });\n    return slideSizes;\n  };\n\n  calculateElementSizeFromRef({ current }) {\n    return {\n      width: current && current.clientWidth ? current.clientWidth : 0,\n      height: current && current.clientHeight ? current.clientHeight : 0\n    };\n  }\n\n  calculateOffset = onSlide => {\n    const slideSizes = this.calculateSlideSizes();\n    let offset = 0;\n    const buffer = this.state.numSlides;\n    const centerMode = this.state.centerMode;\n    if (slideSizes) {\n      const slidesToCalculate = slideSizes.slice(0, onSlide + buffer);\n      if (slidesToCalculate) {\n        offset = slidesToCalculate.reduce((prev, curr) => prev + curr.width, 0);\n      }\n    }\n    if (centerMode) {\n      const targetSlide = this.wrapAroundCount(onSlide);\n      offset -= this.calculateElementSizeFromRef(this.sliderRef).width / 2;\n      if (slideSizes[targetSlide]) {\n        offset += slideSizes[targetSlide].width / 2;\n      }\n      if (window && this.sliderRef.current) {\n        const paddingLeft = window\n          .getComputedStyle(this.sliderRef.current, null)\n          .getPropertyValue(\"padding-left\")\n          .replace(\"px\", \"\");\n        offset += parseInt(paddingLeft);\n      }\n    }\n    return -1 * offset;\n  };\n\n  wrapAroundCount(n) {\n    const { numSlides } = this.state;\n    if (numSlides <= 0) {\n      return;\n    }\n    if (n >= numSlides) {\n      return n % numSlides;\n    }\n    if (n < 0) {\n      while (n < 0) {\n        n += numSlides;\n      }\n    }\n    return n;\n  }\n\n  componentDidUpdate = prevProps => {\n    //On mouse up events, we should decide if we need to increment\n    const {\n      down,\n      delta: [xDelta, yDelta]\n    } = this.props;\n    const { dragging } = this.state;\n    const { down: prevDown } = prevProps;\n    //TODO sensibility to drag from props\n    const threshold = 3;\n\n    //First Mouse down\n    if (down && !prevDown) {\n      //don't bother updating state if we weren't previously dragging\n      if (!dragging) {\n        this.setState({\n          ...this.state,\n          dragging: false\n        });\n      }\n    }\n\n    //Dragging / long click\n    if (down) {\n      //we only want to capture the first dragging past the threshold\n      if (!dragging) {\n        if (Math.abs(xDelta) >= threshold || Math.abs(yDelta) >= threshold) {\n          this.setState({\n            ...this.state,\n            dragging: true\n          });\n        }\n      }\n    }\n\n    //Mouse Up\n    //If this is the first mouse up event, we'll do the calculation\n    if (!down && prevDown) {\n      const { onSlide } = this.state;\n      let increment = 0;\n      const slideSizes = this.calculateSlideSizes();\n      const targetSlide = this.wrapAroundCount(onSlide);\n      if (xDelta > slideSizes[targetSlide].width / 2) {\n        increment = -1;\n      } else if (xDelta < (-1 * slideSizes[targetSlide].width) / 2) {\n        increment = 1;\n      }\n      if (increment) {\n        this.incrementSlide(increment, () => {\n          //basically wait for the click to fire...\n          //there's gotta be a more legit way to do this\n          setTimeout(() => {\n            this.setState({ ...this.state, dragging: false });\n          }, 0);\n        });\n      } else {\n        setTimeout(() => {\n          //basically wait for the click to fire...\n          //there's gotta be a more legit way to do this\n          this.setState({ ...this.state, dragging: false });\n        }, 0);\n      }\n    }\n\n    const childSlides = this.props.children || [];\n    if (childSlides.length !== this.state.numSlides) {\n      this.calculateSlides();\n    }\n  };\n\n  onRest = () => {\n    const { cutToSlideOnRest } = this.state;\n    if (cutToSlideOnRest !== false) {\n      this.cutToSlide(cutToSlideOnRest, () => {\n        this.setState({ interaction: \"rest\" });\n      });\n    } else {\n      this.setState({ interaction: \"rest\" });\n    }\n  };\n\n  handleClick = e => {\n    //if dragging, block click actions\n    if (this.state.dragging) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n\n  render() {\n    //Data provided from withGesture\n    const {\n      delta: [xDelta],\n      down\n    } = this.props;\n\n    //get offset\n    const { onSlide, noAnimate, numSlides, slides } = this.state;\n    const { slidesToShow } = settings;\n    const baseOffset = this.calculateOffset(onSlide);\n    const offset = down ? xDelta + baseOffset : baseOffset;\n\n    // Using slides.length instead of numSlides to account for clones\n    const sliderWidth = `${(slides.length * 100) / slidesToShow}%`;\n\n    const styles = {};\n    const springConfig = {\n      mass: 1,\n      tension: 300,\n      friction: 10,\n      clamp: true\n    };\n\n    const prevSlideNum = this.wrapAroundCount(onSlide - 1);\n    const nextSlideNum = this.wrapAroundCount(onSlide + 1);\n    return (\n      <div\n        className=\"react-simple-carousel\"\n        style={styles}\n        ref={this.sliderRef}\n      >\n        <Spring\n          config={springConfig}\n          native\n          to={{ x: offset }}\n          onRest={this.onRest}\n          onStart={() => {\n            this.setState({ interaction: \"start\" });\n          }}\n          after={() => {\n            this.setState({ interaction: \"after\" });\n          }}\n          immediate={noAnimate}\n        >\n          {({ x }) => (\n            <animated.div\n              className=\"react-simple-carousel__inner\"\n              style={{\n                transform: x.interpolate(x => `translate3d(${x}px,0,0)`),\n                width: sliderWidth\n              }}\n            >\n              {slides.map((slide, i) => (\n                <ReactSimpleCarouselSlide\n                  key={i}\n                  ref={this.slideRefs[i]}\n                  handleClick={this.handleClick}\n                  slideIndex={slide.index}\n                  isClone={slide.clone}\n                  //TO DO: this needs to be correctly calculated\n                  //e.g. react-simple-carousel__slide--distance_1 is the same as next\n                  //e.g. react-simple-carousel__slide--distance_-1 is the same as prev\n                  relFromActive={slide.index - onSlide}\n                  isPrev={slide.index === prevSlideNum}\n                  isNext={slide.index === nextSlideNum}\n                  isActive={slide.index === onSlide}\n                  onSlide={onSlide}\n                  numSlides={numSlides}\n                >\n                  {slide.el}\n                </ReactSimpleCarouselSlide>\n              ))}\n            </animated.div>\n          )}\n        </Spring>\n        <div className=\"react-simple-carousel__controls\">\n          <button\n            className=\"react-simple-carousel__controls__arrow react-simple-carousel__controls__arrow--left\"\n            onClick={this.prev}\n          >\n            <img src={LeftArrow} alt=\"Previous\" />\n            Previous\n          </button>\n          <button\n            className=\"react-simple-carousel__controls__arrow react-simple-carousel__controls__arrow--right\"\n            onClick={this.next}\n          >\n            <img src={RightArrow} alt=\"Next\" />\n            Next\n          </button>\n          <ul className=\"react-simple-carousel__controls__dots\">\n            {Array.apply(null, { length: numSlides }).map((x, i) => {\n              const additionalClasses =\n                i === onSlide\n                  ? \"react-simple-carousel__controls__dots__dot--active\"\n                  : \"\";\n              return (\n                <li\n                  key={i}\n                  className={`react-simple-carousel__controls__dots__dot ${additionalClasses}`}\n                >\n                  <button\n                    onClick={e => {\n                      e.preventDefault();\n                      this.toSlide(i);\n                    }}\n                  >\n                    Jump to slide {i}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n        {/* <div className=\"react-simple-carousel__details\">\n          <div>on slide: {onSlide}</div>\n          <div>interaction: {this.state.interaction}</div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nconst ReactSimpleCarouselSlide = React.forwardRef(\n  (\n    {\n      children,\n      handleClick,\n      clone,\n      slideIndex,\n      isClone,\n      relFromActive,\n      inverseRelFromActive,\n      isActive,\n      isNext,\n      isPrev\n    },\n    ref\n  ) => {\n    let classNames = [\"react-simple-carousel__slide\"];\n    classNames.push(`react-simple-carousel__slide--index-${slideIndex}`);\n    classNames.push(`react-simple-carousel__slide--distance_${relFromActive}`);\n    if (isClone) {\n      classNames.push(\"react-simple-carousel__slide--clone\");\n    }\n    if (isNext) {\n      classNames.push(\"react-simple-carousel__slide--next\");\n    }\n    if (isPrev) {\n      classNames.push(\"react-simple-carousel__slide--prev\");\n    }\n    if (isActive) {\n      classNames.push(\"react-simple-carousel__slide--active\");\n    } else {\n      classNames.push(\"react-simple-carousel__slide--inactive\");\n    }\n    return (\n      <div\n        className={classNames.join(\" \")}\n        ref={ref}\n        onClickCapture={handleClick}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nexport default withGesture()(ReactSimpleCarousel);\n"]}